(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{217:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"k8s"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k8s"}},[e._v("#")]),e._v(" k8s")]),e._v(" "),s("h2",{attrs:{id:"minikube"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minikube"}},[e._v("#")]),e._v(" minikube")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("brew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" minikube "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 一个可以在本地跑起来的 Kubernetes 环境,minikube需要docker作为底层支 持")]),e._v("\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" kubectl "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Kubernetes 的命令行客户端")]),e._v("\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-machine-driver-hyperkit "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 给 Minikube 使用的虚拟化引擎")]),e._v("\n\nminikube start "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建虚拟集群")]),e._v("\nminikube "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入集群内部")]),e._v("\nminikube dashboard "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动控制台,浏览器访问")]),e._v("\nminikube docker- "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看环境变量")]),e._v("\nminikube "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 获取集群ip,export no_proxy=$no_proxy,$(minikube ip)")]),e._v("\n")])])]),s("h2",{attrs:{id:"k8s-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k8s-2"}},[e._v("#")]),e._v(" k8s")]),e._v(" "),s("p",[e._v("用户可以通过 UI 或者 CLI 提交一个 Pod 给 Kubernetes 进行部署，这个 Pod 请求首先会通过 CLI 或者 UI 提交给 Kubernetes API Server，下一步 API Server 会把这个信息写入到它的存储系统 etcd，之后 Scheduler 会通过 API Server 的 watch 或者叫做 notification 机制得到这个信息：有一个 Pod 需要被调度。")]),e._v(" "),s("p",[e._v("这个时候 Scheduler 会根据它的内存状态进行一次调度决策，在完成这次调度之后，它会向 API Server report 说：“OK！这个 Pod 需要被调度到某一个节点上。”")]),e._v(" "),s("p",[e._v("这个时候 API Server 接收到这次操作之后，会把这次的结果再次写到 etcd 中，然后 API Server 会通知相应的节点进行这次 Pod 真正的执行启动。相应节点的 kubelet 会得到这个通知，kubelet 就会去调 Container runtime 来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络。")]),e._v(" "),s("p",[e._v("两层路由 ingress(外部)、service(内部) service连接pod")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://static001.infoq.cn/resource/image/5c/f8/5c9fe50067821e9e86a74cae4cbdd9f8.png",alt:"img"}})]),e._v(" "),s("p",[e._v("master模块")]),e._v(" "),s("p",[e._v("node模块")]),e._v(" "),s("p",[e._v("kubelet主要负责接收master命令维护容器生命周期,")]),e._v(" "),s("p",[e._v("kube-proxy负责负载均衡,处理流量转发")]),e._v(" "),s("p",[e._v("container runtime负责镜像管理以及pod和容器的真正运行.")]),e._v(" "),s("p",[e._v("kube-proxy:负责方向代理和负载均衡的实现.真正落实了server,核心功能就是将service的请求转发到后端的多个pod上")]),e._v(" "),s("p",[e._v("用户通过kubectl接口向k8s下发指令,指令通过.yaml的配置文件编写")]),e._v(" "),s("p",[e._v("Kubernetes 是通过 Controller，也就是我们刚才提到的控制器去维护 Deployment 中 Pod 的数目，它也会去帮助 Deployment 自动恢复失败的 Pod。")]),e._v(" "),s("p",[e._v("scheduler:将调度的pod绑定到node上,并将绑定信息写到etcd")]),e._v(" "),s("p",[e._v("schedule负责决定pod放在哪个node上,然后将决策告诉kubelet,kubelet完成pod在node的加载工作")]),e._v(" "),s("p",[e._v("当一个pod要访问其他pod时候通过service的cluster ip 和port,cluster ip和port时k8s集群的内部地址,提供给集群内其他pod之间访问使用,外部无法通过这个cluster-ip来访问k8s中的应用")]),e._v(" "),s("p",[e._v("controller manager:管理系统,包括8个controller分贝对应副本,节点,资源,命名空间,服务等.")]),e._v(" "),s("p",[e._v("我们把master上提供管理接口的组件称为kubeapiserver,对应还需要用于和api server交互的客户端,一个提供给集群运维管理员使用称为kubectl,一个提供给worker节点使用,称为kubelet,通过worker上的kubelet周期性的上报节点资源和容器运行情况,然后master把这个数据存储下来.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://static001.infoq.cn/resource/image/e9/49/e95c765b7ac2b6802b165e03acd40849.png",alt:"img"}})]),e._v(" "),s("p",[e._v("Pod、Deployment、Service 都属于一个 Namespace，同一个 Namespace 中的资源需要命名的唯一性，不同的 Namespace 中的资源可以重名。")]),e._v(" "),s("p",[e._v("Kubernetes API 是由 **HTTP+JSON ** 组成的：用户访问的方式是 HTTP，访问的 API 中 content 的内容是 JSON 格式的。")]),e._v(" "),s("p",[e._v("对于这个 Pod 类型的资源，它的 HTTP 访问的路径，就是 API，然后是 apiVesion: V1, 之后是相应的 Namespaces，以及 Pods 资源，最终是 Podname，也就是 Pod 的名字")]),e._v(" "),s("p",[e._v("一组 Pod 就是通过 label selector 来表达的")]),e._v(" "),s("p",[e._v("kubelet:通过cadvisor获取其所在node及容器(docker)的数据,cadvisor自动采集cpu,内存,文件,网络,使用统计信息,kubelet作为node的管理者,把cadvisor采集上来的数据通过restapi的形式暴露给k8s其他资源")]),e._v(" "),s("p",[e._v("每次kubectl发送来的指令都会被apiserver先存储到etcd中")]),e._v(" "),s("p",[e._v("controller manager监控容器情况,通过监听apiserver里面提供的一个list watch接口来监控哥哥集群资源数据,调整集群资源状态")]),e._v(" "),s("p",[e._v("scheduler主要是调度作用,将容器部署到指定机器上,然后将pod和node字眼映射,决定每个pod放在哪个node上,命令kubelet惊醒容器部署.")]),e._v(" "),s("h2",{attrs:{id:"kubectl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubectl"}},[e._v("#")]),e._v(" kubectl")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("kubectl create -f pod.yml "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建pod 这里可以 --record=true 让 Kubernetes 把这行命令记到发布历史中备查。这 时可以⻢上运行下面的命令查看各个 pod 的状态:")]),e._v("\nkubectl create -f svc.yml\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建服务,可供外部访问,服务对外")]),e._v("\nkubectl create -f deployment.yml "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建deployment,服务对内,多pod节点")]),e._v("\nkubectl get nodes\nkubectl get deployments\nkubectl apply -f \nkubectl describe pods "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" Labels\nkubectl describe services\nkubectl delete pod k8s-\nkubectl rollout status deployment k8s-demo-deployment "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看发布状态")]),e._v("\nkubectl rollout undo deployment k8s-demo-deployment --to-revision"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 回滚到上个版本")]),e._v("\nkubectl run helloworld --image"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("registry.cn-qingdao.aliyuncs.com/gold-faa "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 通过镜像创建一个deployment")]),e._v("\nkubectl proxy "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建一个当前终端到k8s cluster的代理,使用proxy来访问内部容器的方法更多适合在debug等场景下使用，当我 们需要对外提供可用的真实服务时，需要更加可靠的手段，那就是 Service ")]),e._v("\nkubectl expose "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建service服务")]),e._v("\nkubectl get "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查询已创建服务 -l 类sql过滤")]),e._v("\nkubectl label "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 自定义label")]),e._v("\nkubectl delete "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" name "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除服务")]),e._v("\n")])])]),s("p",[e._v("Deployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。一般大家用 Deployment 这个抽象来做应用的真正的管理，而 Pod 是组成 Deployment 最小的单元。")]),e._v(" "),s("p",[e._v("Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns")]),e._v(" "),s("p",[e._v("Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。")]),e._v(" "),s("p",[e._v("Kube-proxy，主要负责为Pod对象提供代理。")]),e._v(" "),s("p",[e._v("Fluentd，主要负责日志收集、存储与查询。")]),e._v(" "),s("p",[e._v("Minikube 启动时会自动配置 kubectl，把它指向 Minikube 提供的 Kubernetes API 服务。可以用下面的命令确认")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("kubectl config current-context "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n")])])]),s("p",[e._v("通常一 个 pod 中只有一个容器")]),e._v(" "),s("p",[e._v("Minikube 自带了 Docker 引擎，所以我们需要重新配置客户端，让 docker 命 令行与 Minikube 中的 Docker 进程通讯")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("eval")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube docker-env"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("p",[e._v("Kubernetes 的用户通常是用 Deployment 来管理服务的。一个 deployment 可以创建指定数量的 pod 部署到各个 node 上，并可完成更新、回滚等操 作。")]),e._v(" "),s("p",[e._v("这是k8s区别于其他容器编排平台的一个显著特点:它不直接运行容器，而是 运行一种称为Pod的高级结构，里面封装了一系列相关的容器，并共享相同 的namespace和网络。")]),e._v(" "),s("p",[e._v("node作为物理节点,需要使用node-ip和node-port组合来从k8s外面访问内部应用")]),e._v(" "),s("h2",{attrs:{id:"简历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简历"}},[e._v("#")]),e._v(" 简历")]),e._v(" "),s("p",[e._v("可以在本地的 Kubernetes 环境测试自己的前后端项目")]),e._v(" "),s("h2",{attrs:{id:"hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[e._v("#")]),e._v(" hello world")]),e._v(" "),s("h2",{attrs:{id:"apiserver四层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apiserver四层"}},[e._v("#")]),e._v(" apiserver四层")]),e._v(" "),s("ol",[s("li",[e._v("api层,主要以rest方式提供api接口,crud,watch,健康检查,日志,性能指标等")]),e._v(" "),s("li",[e._v("访问控制层,负责身份健全,核准用户对资源的访问权限,设置访问逻辑")]),e._v(" "),s("li",[e._v("注册表层,选择访问的资源对象,k8s把所有资源对象保存在注册表中")]),e._v(" "),s("li",[e._v("etcd数据库:用来持久化k8s的资源对象")])]),e._v(" "),s("h2",{attrs:{id:"服务部署流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务部署流程"}},[e._v("#")]),e._v(" 服务部署流程")]),e._v(" "),s("ol",[s("li",[e._v("通过kubectl向apiserver发送命令在node上建立pod和container")]),e._v(" "),s("li",[e._v("经过权限控制,调用资源,但还没有真正开始部署应用")]),e._v(" "),s("li",[e._v("controller manager,scheduler,kubelet协助完成整个部署过程")]),e._v(" "),s("li",[e._v("apiserver和controller manager,scheduler以及kubelet之间通过list-watch方式通信(事件发送与监听)")]),e._v(" "),s("li",[e._v("controller manager通过etcd获取所需要创建的副本书,交由scheduler进行策略分析")]),e._v(" "),s("li",[e._v("最后kubelet负责最终的pod创建,和容器的加载,部署号容器后通过service进行访问,通过cadvisor监控资源")])]),e._v(" "),s("h2",{attrs:{id:"list-watch机制保持数据同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-watch机制保持数据同步"}},[e._v("#")]),e._v(" list-watch机制保持数据同步")]),e._v(" "),s("h2",{attrs:{id:"crd-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crd-operator"}},[e._v("#")]),e._v(" CRD Operator")]),e._v(" "),s("h2",{attrs:{id:"k8s-all-in-one-的yaml文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k8s-all-in-one-的yaml文件"}},[e._v("#")]),e._v(" k8s all in one 的yaml文件")]),e._v(" "),s("h2",{attrs:{id:"flutter构建mac-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flutter构建mac-app"}},[e._v("#")]),e._v(" flutter构建mac app")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("flutter config --enable-macos-desktop\n")])])]),s("h2",{attrs:{id:"minikube代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minikube代理"}},[e._v("#")]),e._v(" minikube代理")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~/.minikube/machines/minikube/config.json` 修改 `HostOptions.EngineOptions.Env")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Env"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HTTP_PROXY=http://127.0.0.1:1087"')]),e._v(",\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HTTPS_PROXY=http://127.0.0.1:1087"')]),e._v(",\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(",\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("eval")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube docker-env"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用minikube主机构建docker镜像")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("eval")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube docker-env -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 用本机构建docker镜像")]),e._v("\n")])])]),s("h2",{attrs:{id:"部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[e._v("#")]),e._v(" 部署")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建deployment")]),e._v("\nkubectl run hello-go --image"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("hello-go:v1 --port"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v(" --image-pull-policy"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Never "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建deployment --image-pull-policy nerver 永远使用本地镜像,而不是从docker hub拉取")]),e._v("\nkubectl get deployments "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看deployment")]),e._v("\nkubectl get pods "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看pod")]),e._v("\nkubectl get events "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看集群事件")]),e._v("\nkubectl config view "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看kubectl配置")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建server,默认情况下pod只能集群内ip访问,要使外部可访问必须将pod公开为server")]),e._v("\nkubectl expose deployment hello-go --type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("LoadBalancer "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#创建服务,将pod公开到公共网络 --type=LoadBalancer在支持负载均衡的云提供商上,将配置外部 IP 地址以访问服务.在 Minikube 上，LoadBalancer 类型通过 minikube service 命令使服务可访问。")]),e._v("\nkubectl get svc "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看server")]),e._v("\nminikube "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" hello-go "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动服务")]),e._v("\nkubectl logs -f "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("pod-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看日志")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新")]),e._v("\nkubectl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" image deployment/hello-go hello-go"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("hello-go:v2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新镜像1")]),e._v("\nkubectl edit deployment/hello-go "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新镜像2,第二种方法")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 插件")]),e._v("\nminikube addons list "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看插件")]),e._v("\nminikube addons "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" heapster "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启用插件")]),e._v("\nminikube addons "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("open")]),e._v(" heapster\nminikube addons disable heapster\nkubectl get po,svc -n kube-system "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看pod和ser")]),e._v("\nkubectl delete "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" hello-go "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除服务")]),e._v("\nkubectl delete deployment hello-go "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除部署")]),e._v("\nkubectl logs -f pod-name\n")])])]),s("h2",{attrs:{id:"istio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#istio"}},[e._v("#")]),e._v(" istio")]),e._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[e._v("curl "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("L https"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("istio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("io"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("downloadIstio "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("\nistioctl manifest apply "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("set profile"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("demo\nkubectl get svc "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("n istio"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("system\nkubectl get pods "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("n istio"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("system\n")])])]),s("h2",{attrs:{id:"代理启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理启动"}},[e._v("#")]),e._v(" 代理启动")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("minikube start  --registry-mirror"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("http://hub-mirror.c.163.com --docker-env "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("http_proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("http://127.0.0.1:1087 --docker-env "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("https_proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("http://127.0.0.1:1087 -p "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n")])])]),s("h2",{attrs:{id:"复制控制器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复制控制器"}},[e._v("#")]),e._v(" 复制控制器")]),e._v(" "),s("p",[e._v("主要目的是监控pod节点的数目,当我们启动pod的时候希望有多个pod副本,可以使用复制控制器来控制启动数目,如果期间部分pod挂了,复制控制器会自动进行重启.")]),e._v(" "),s("h2",{attrs:{id:"命令速查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令速查"}},[e._v("#")]),e._v(" 命令速查")])])}),[],!1,null,null,null);t.default=r.exports}}]);